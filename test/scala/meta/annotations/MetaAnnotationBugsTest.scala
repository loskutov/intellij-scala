package scala.meta.annotations

import java.io.File

import com.intellij.openapi.util.io.FileUtil
import org.jetbrains.plugins.scala.lang.psi.api.statements.ScFunction
import org.jetbrains.plugins.scala.lang.psi.api.toplevel.typedef.{ScClass, ScObject, ScTypeDefinition}
import org.junit.Assert

class MetaAnnotationBugsTest extends MetaAnnotationTestBase {
  def testSCL10965(): Unit = {
    compileMetaSource()
    myFixture.configureByText("Foo.scala",
      """
        |@repro sealed trait FooOp[A]
        |object FooOp {
        |  final case class StringOp(string: String) extends FooOp[String]
        |  final case class AOp[A](a: A) extends FooOp[A]
        |}
      """.stripMargin
    )
    val expectedExpansion =
      """{
        |  sealed trait FooOp[A]
        |  object FooOp {
        |    trait ForF[F[_]] {
        |      def stringOp(string: String): F[String]
        |      def aOp[A](a: A): F[A]
        |    }
        |    final case class StringOp(string: String) extends FooOp[String]()
        |    final case class AOp[A](a: A) extends FooOp[A]()
        |  }
        |}""".stripMargin
    myFixture.findClass("FooOp").asInstanceOf[ScTypeDefinition].getMetaExpansion match {
      case Right(tree)                      => Assert.assertEquals(expectedExpansion, tree.toString())
      case Left(reason) if reason.nonEmpty  => Assert.fail(reason)
      case Left("")                         => Assert.fail("Expansion was empty - did annotation even run?")
    }
  }

  def testSCL11099(): Unit = {
    compileMetaSource()
    val code =
      """
        |object App {
        |  @poly def <caret>fooOpToId[A](fooOp: FooOp[A]): Id[A] = fooOp match {
        |    case StringOp(string) => Right(string)
        |    case AOp(a) => Left(())
        |  }
        |}""".stripMargin
    val expansion =
      """
        |val fooOpToId: _root_.cats.arrow.FunctionK[FooOp, Id] = new _root_.cats.arrow.FunctionK[FooOp, Id] {
        |  def apply[A](fooOp: FooOp[A]): Id[A] = fooOp match {
        |    case StringOp(string) =>
        |      Right(string)
        |    case AOp(a) =>
        |      Left(())
        |  }
        |}""".stripMargin.trim
    checkExpansionEquals(code, expansion)
  }

  def testSCL12032(): Unit = {
    compileMetaSource(
      """
        |import scala.meta._
        |class a extends scala.annotation.StaticAnnotation {
        |  inline def apply(defn: Any): Any = meta {
        |    defn match {
        |      case q"..$mods def $name[..$tparams](...$paramss): $tpeopt = $expr" =>
        |        q"..$mods def $name[..$tparams](...$paramss): $tpeopt = $expr"
        |
        |      case _ => abort("@a can only be applied to method")
        |    }
        |   }
        | }
      """.stripMargin)

    val codeBar =
      """
        |class A {
        |  @a def foo() = "not important"
        |  @a protected def bar<caret>() = "not important"
        |}
      """.stripMargin
    val expectedBar = "protected def bar() = \"not important\""
    checkExpansionEquals(codeBar, expectedBar)

    val codeFoo =
      """
        |class A {
        |  @a def foo<caret>() = "not important"
        |  @a protected def bar() = "not important"
        |}
      """.stripMargin
    val expectedFoo = "def foo() = \"not important\""
    checkExpansionEquals(codeFoo, expectedFoo)
  }

  def testSCL11952(): Unit = {
    import org.jetbrains.plugins.scala.lang.psi.types.result._
    def fail(msg:String): Nothing = {Assert.fail(msg); ???}
    compileMetaSource()
    myFixture.configureByText(s"${getTestName(false)}.scala",
    """
      |@SCL11952
      |class Foo
      |
      |object Bar {
      |  def fooA: Foo.A = ???
      |}
    """.stripMargin)

    val foo = myFixture.findClass("Foo").asInstanceOf[ScClass]
    val bar = myFixture.findClass("Bar$").asInstanceOf[ScObject]
    val fooType = foo.fakeCompanionModule
      .getOrElse(fail("No companion generated by annotation"))
      .members
      .find(_.getName == "foo")
      .map(_.asInstanceOf[ScFunction].returnType)
      .getOrElse(fail("Method not generated by annotation")) match {
      case Success(res, elem) => res
      case Failure(cause, _)  => fail(s"Failed to infer generated method type: $cause")
    }

    val fooBarAType = bar.members
      .find(_.getName == "fooA").get
      .asInstanceOf[ScFunction].returnType match {
      case Success(res, elem) => res
      case Failure(cause, _)  => fail(s"Failed to infer generated method type: $cause")
    }

    Assert.assertTrue("Generated type not equal to specified", fooType.equiv(fooBarAType))
  }
}
